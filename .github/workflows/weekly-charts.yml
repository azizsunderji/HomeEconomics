jobs:
  generate-charts:
    needs: download-data
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [0]   # TEMP for testing: single shard
    env:
      TZ: America/New_York
      REMOTE_BASE: ${{ secrets.REMOTE_BASE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # safety net in case requirements.txt misses anything used by charts:
          pip install matplotlib pillow numpy pytz python-dateutil

      - name: Download data artifact
        uses: actions/download-artifact@v4
        with:
          name: redfin-data
          path: data

      - name: Compute today's folder (Eastern)
        id: date
        run: echo "DATE=$(TZ='America/New_York' date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Debug tree
        run: |
          pwd
          ls -lah
          ls -lah scripts || true
          ls -lah data || true

      - name: Make output dir
        run: mkdir -p out/reports

      - name: Make shard city list (TEST: use all test cities)
        run: |
          cp test_cities.txt cities_shard.txt
          echo "Using $(wc -l < cities_shard.txt) cities:"
          cat cities_shard.txt

      - name: Generate charts (this shard)
        run: |
          python scripts/make_charts.py \
            --date "${{ steps.date.outputs.DATE }}" \
            --cities cities_shard.txt \
            --out "out/reports/" \
            --no-download \
            --no-national
        # remove 'continue-on-error: true' so we see real errors

      - name: List generated charts
        run: |
          echo "Generated charts:"
          find out/reports -name "*.png" | wc -l
          find out/reports -name "*.png" | head -20 || true
          du -sh out/reports/ || true

      - name: Upload charts artifact
        uses: actions/upload-artifact@v4
        with:
          name: charts-shard-${{ matrix.shard }}
          path: out/reports/
          retention-days: 1
          if-no-files-found: warn

  upload-to-server:
    needs: generate-charts
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York
      REMOTE_BASE: ${{ secrets.REMOTE_BASE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute today's folder (Eastern)
        id: date
        run: echo "DATE=$(TZ='America/New_York' date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Download all chart artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: charts-shard-*
          path: out/reports/
          merge-multiple: true

      - name: Count total charts
        run: |
          echo "Total charts generated:"
          if [ -d out/reports ]; then
            find out/reports -name "*.png" | wc -l
            echo "Total size:"
            du -sh out/reports/ || true
          else
            echo "0 (no charts directory present)"
          fi

      - name: Install lftp
        run: sudo apt-get update && sudo apt-get install -y lftp

      - name: Upload via SFTP
        if: ${{ hashFiles('out/reports/**.png') != '' }}
        env:
          HOST: ${{ secrets.SFTP_HOST }}
          USER: ${{ secrets.SFTP_USER }}
          KEY: ${{ secrets.SFTP_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts 2>/dev/null || true
          lftp -e "
            set sftp:auto-confirm yes;
            set sftp:connect-program 'ssh -i ~/.ssh/id_rsa';
            set net:max-retries 3;
            set net:timeout 60;
            set net:reconnect-interval-base 5;
            open -u $USER,dummy sftp://$HOST;
            mirror -R --only-newer --parallel=4 --verbose \
              out/reports/${{ steps.date.outputs.DATE }}/ \
              ${REMOTE_BASE}/${{ steps.date.outputs.DATE }}/;
            bye
          " || echo "Upload completed with warnings"
