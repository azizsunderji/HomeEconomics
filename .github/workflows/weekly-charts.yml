name: Weekly Metro Charts

on:
  schedule:
    # Run at 12:05 AM ET every Thursday (after Wednesday data)
    - cron: "5 4 * * 4"  # 12:05am ET during EDT (UTC-4)
    - cron: "5 5 * * 4"  # 12:05am ET during EST (UTC-5)
  workflow_dispatch:  # Allow manual trigger for testing

jobs:
  download-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas pyarrow requests tqdm

      - name: Download Redfin data
        run: |
          python scripts/download_data.py --output data --force
          
      - name: Upload data artifact
        uses: actions/upload-artifact@v4
        with:
          name: redfin-data
          path: data/weekly_housing_market_data.parquet
          retention-days: 1

  generate-charts:
    needs: download-data
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [0, 1]  # 8 parallel jobs
    
    env:
      TZ: America/New_York
      REMOTE_BASE: ${{ secrets.REMOTE_BASE }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download data artifact
        uses: actions/download-artifact@v4
        with:
          name: redfin-data
          path: data

      - name: Compute today's folder (Eastern)
        id: date
        run: echo "DATE=$(TZ='America/New_York' date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Make shard city list
        run: |
          # Extract cities for this shard (every 2nd city starting from shard number)
          awk -v shard=${{ matrix.shard }} '
            !/^#/ && NF > 0 && (NR-1) % 2 == shard { print }
          ' test_cities.txt > cities_shard.txt
          
          echo "Shard ${{ matrix.shard }} processing $(wc -l < cities_shard.txt) cities"
          head -5 cities_shard.txt

      - name: Generate charts (this shard)
        run: |
          python scripts/make_charts.py \
            --date "${{ steps.date.outputs.DATE }}" \
            --cities cities_shard.txt \
            --out "out/reports/" \
            --no-download \
            --no-national
        continue-on-error: true  # Don't fail the whole job for individual chart failures

      - name: List generated charts
        run: |
          echo "Generated charts:"
          find out/reports -name "*.png" | wc -l
          du -sh out/reports/ || echo "No charts generated"

      - name: Upload charts artifact
        uses: actions/upload-artifact@v4
        with:
          name: charts-shard-${{ matrix.shard }}
          path: out/reports/
          retention-days: 1
          if-no-files-found: warn

  upload-to-server:
    needs: generate-charts
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York
      REMOTE_BASE: ${{ secrets.REMOTE_BASE }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute today's folder (Eastern)
        id: date
        run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Download all chart artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: charts-shard-*
          path: out/reports/
          merge-multiple: true

      - name: Count total charts
        run: |
          echo "Total charts generated:"
          find out/reports -name "*.png" | wc -l
          echo "Total size:"
          du -sh out/reports/

      - name: Install lftp
        run: sudo apt-get update && sudo apt-get install -y lftp

      - name: Upload via SFTP
        env:
          HOST: ${{ secrets.SFTP_HOST }}
          USER: ${{ secrets.SFTP_USER }}
          KEY: ${{ secrets.SFTP_KEY }}
        run: |
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "$KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Create known_hosts to avoid prompt
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts 2>/dev/null || true

          # Upload with lftp
          lftp -e "
            set sftp:auto-confirm yes;
            set sftp:connect-program 'ssh -i ~/.ssh/id_rsa';
            set net:max-retries 3;
            set net:timeout 60;
            set net:reconnect-interval-base 5;
            open -u $USER,dummy sftp://$HOST;
            mirror -R --only-newer --parallel=4 --verbose \
              out/reports/${{ steps.date.outputs.DATE }}/ \
              ${REMOTE_BASE}/${{ steps.date.outputs.DATE }}/;
            bye
          " || echo "Upload completed with warnings"

      - name: Generate summary report
        run: |
          echo "## Weekly Chart Generation Report" > summary.md
          echo "" >> summary.md
          echo "**Date:** ${{ steps.date.outputs.DATE }}" >> summary.md
          echo "" >> summary.md
          
          total_charts=$(find out/reports -name "*.png" | wc -l)
          total_cities=$(find out/reports -type d -mindepth 2 | wc -l)
          
          echo "### Statistics" >> summary.md
          echo "- Total charts generated: $total_charts" >> summary.md
          echo "- Total cities processed: $total_cities" >> summary.md
          echo "- Expected charts: $((927 * 12))" >> summary.md
          echo "" >> summary.md
          
          if [ $total_charts -lt $((927 * 12)) ]; then
            echo "⚠️ Warning: Some charts may have failed to generate" >> summary.md
          else
            echo "✅ All charts generated successfully" >> summary.md
          fi
          
          cat summary.md

      - name: Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: generation-summary
          path: summary.md
          retention-days: 7